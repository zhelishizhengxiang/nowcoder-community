<?xml version="1.0" encoding="UTF-8" ?>
<!--该文件的格式可以在MyBatis的官网找到，这里配置的也就是Mapper映射的配置文件-->



<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--这里namespace属性写userMapper的全类名，相当于写明该配置文件是为哪个文件服务的-->
<mapper namespace="com.nowcoder.community.dao.UserMapper">

    <sql id="insertFields">
        username, password, salt, email, type, status, activation_code, header_url, create_time
    </sql>

    <!--为了能够复用，所以可以将多次使用的查询得到的字段用一个sql标签包括起来，下面就可以复用-->
    <sql id="selectFields">
        id, username, password, salt, email, type, status, activation_code, header_url, create_time
    </sql>

    <!--如果是查询方法，要用select标签进行访包括，里面写查询的SQL语句，insert和update和delete同理-->
<!--    其中的id属性用于声明对应的方法名字，resultType是返回值的类名-->
    <select id="selectById" resultType="com.nowcoder.community.entity.User">
        /*这里就可以用include标签来把复用的东西通过id引用出来*/
        select <include refid="selectFields"></include>
        from user
        where id = #{id}/*这里就是引入对应方法的参数*/
    </select>


    <select id="selectByName" resultType="com.nowcoder.community.entity.User">
        select <include refid="selectFields"></include>
        from user
        where username = #{username}
    </select>

    <select id="selectByEmail" resultType="com.nowcoder.community.entity.User">
        select <include refid="selectFields"></include>
        from user
        where email = #{email}
    </select>

    <!--id为方法名，parameterType为要插入的参数，keyProperty是声明id字段对应的属性
    这么做的原因是，在insert时，mysql底层会自动生成id，mybatis会从mysql得到这个id，并填入插入的user中-->
<!--    插入的值是从传入的参数user里来，所以还是使用#{}的方式-->
<!--    insertFields只是少了id，会由mybatis来自动填入-->
    <insert id="insertUser" parameterType="com.nowcoder.community.entity.User"  keyProperty="id" >
        insert into user (<include refid="insertFields"></include>)
        values(#{username}, #{password}, #{salt}, #{email}, #{type}, #{status}, #{activationCode}, #{headerUrl}, #{createTime})

    </insert>


    <update id="updateStatus">
        update user set status = #{status} where id = #{id}
    </update>

    <update id="updateHeader">
        update user set header_url = #{headerUrl} where id = #{id}
    </update>

    <update id="updatePassword">
        update user set password = #{password} where id = #{id}
    </update>

</mapper>